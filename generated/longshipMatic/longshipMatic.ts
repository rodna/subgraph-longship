// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get underlying_added(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokens_minted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get underlying_withdrawn(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokens_burned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LongChomped extends ethereum.Event {
  get params(): LongChomped__Params {
    return new LongChomped__Params(this);
  }
}

export class LongChomped__Params {
  _event: LongChomped;

  constructor(event: LongChomped) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get chomper(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LongClosed extends ethereum.Event {
  get params(): LongClosed__Params {
    return new LongClosed__Params(this);
  }
}

export class LongClosed__Params {
  _event: LongClosed;

  constructor(event: LongClosed) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LongLiquidatedBankruptcy extends ethereum.Event {
  get params(): LongLiquidatedBankruptcy__Params {
    return new LongLiquidatedBankruptcy__Params(this);
  }
}

export class LongLiquidatedBankruptcy__Params {
  _event: LongLiquidatedBankruptcy;

  constructor(event: LongLiquidatedBankruptcy) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LongOpened extends ethereum.Event {
  get params(): LongOpened__Params {
    return new LongOpened__Params(this);
  }
}

export class LongOpened__Params {
  _event: LongOpened;

  constructor(event: LongOpened) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liq_price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get holder(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RepoChomped extends ethereum.Event {
  get params(): RepoChomped__Params {
    return new RepoChomped__Params(this);
  }
}

export class RepoChomped__Params {
  _event: RepoChomped;

  constructor(event: RepoChomped) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get chomper(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RepoOpened extends ethereum.Event {
  get params(): RepoOpened__Params {
    return new RepoOpened__Params(this);
  }
}

export class RepoOpened__Params {
  _event: RepoOpened;

  constructor(event: RepoOpened) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get repo_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get underlying_quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bankruptcy_payout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get holder(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RepoRedeemed extends ethereum.Event {
  get params(): RepoRedeemed__Params {
    return new RepoRedeemed__Params(this);
  }
}

export class RepoRedeemed__Params {
  _event: RepoRedeemed;

  constructor(event: RepoRedeemed) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class longshipMatic__longsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getLiq_price(): BigInt {
    return this.value0;
  }

  getLeverage(): BigInt {
    return this.value1;
  }

  getCollateral(): BigInt {
    return this.value2;
  }

  getExpiry(): BigInt {
    return this.value3;
  }

  getHolder(): Address {
    return this.value4;
  }
}

export class longshipMatic__reposResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getRepo_amount(): BigInt {
    return this.value0;
  }

  getUnderlying_quantity(): BigInt {
    return this.value1;
  }

  getExpiry(): BigInt {
    return this.value2;
  }

  getBankruptcy_payout(): BigInt {
    return this.value3;
  }

  getHolder(): Address {
    return this.value4;
  }
}

export class longshipMatic extends ethereum.SmartContract {
  static bind(address: Address): longshipMatic {
    return new longshipMatic("longshipMatic", address);
  }

  BRICK_SIZE(): BigInt {
    let result = super.call("BRICK_SIZE", "BRICK_SIZE():(uint64)", []);

    return result[0].toBigInt();
  }

  try_BRICK_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BRICK_SIZE", "BRICK_SIZE():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_IN_TOKEN_DECIMALS(): BigInt {
    let result = super.call(
      "ONE_IN_TOKEN_DECIMALS",
      "ONE_IN_TOKEN_DECIMALS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_IN_TOKEN_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_IN_TOKEN_DECIMALS",
      "ONE_IN_TOKEN_DECIMALS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PARENT(): Address {
    let result = super.call("PARENT", "PARENT():(address)", []);

    return result[0].toAddress();
  }

  try_PARENT(): ethereum.CallResult<Address> {
    let result = super.tryCall("PARENT", "PARENT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentOraclePrice(): BigInt {
    let result = super.call(
      "currentOraclePrice",
      "currentOraclePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentOraclePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentOraclePrice",
      "currentOraclePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPayoutFromInt(
    _price: BigInt,
    target_base: BigInt,
    tick_size: BigInt
  ): BigInt {
    let result = super.call(
      "getPayoutFromInt",
      "getPayoutFromInt(uint256,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(target_base),
        ethereum.Value.fromUnsignedBigInt(tick_size)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPayoutFromInt(
    _price: BigInt,
    target_base: BigInt,
    tick_size: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPayoutFromInt",
      "getPayoutFromInt(uint256,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(target_base),
        ethereum.Value.fromUnsignedBigInt(tick_size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPayouts(prices: Array<BigInt>): Array<BigInt> {
    let result = super.call("getPayouts", "getPayouts(uint256[]):(uint256[])", [
      ethereum.Value.fromUnsignedBigIntArray(prices)
    ]);

    return result[0].toBigIntArray();
  }

  try_getPayouts(prices: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPayouts",
      "getPayouts(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(prices)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getQuadraturePrices(): Array<BigInt> {
    let result = super.call(
      "getQuadraturePrices",
      "getQuadraturePrices():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getQuadraturePrices(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getQuadraturePrices",
      "getQuadraturePrices():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getWeights(): Array<BigInt> {
    let result = super.call("getWeights", "getWeights():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getWeights(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getWeights", "getWeights():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  highest_base(): BigInt {
    let result = super.call("highest_base", "highest_base():(uint128)", []);

    return result[0].toBigInt();
  }

  try_highest_base(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("highest_base", "highest_base():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  invariantFractionFromSendBack(underlyingToSendBack: BigInt): BigInt {
    let result = super.call(
      "invariantFractionFromSendBack",
      "invariantFractionFromSendBack(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(underlyingToSendBack)]
    );

    return result[0].toBigInt();
  }

  try_invariantFractionFromSendBack(
    underlyingToSendBack: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "invariantFractionFromSendBack",
      "invariantFractionFromSendBack(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(underlyingToSendBack)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longs(param0: BigInt): longshipMatic__longsResult {
    let result = super.call(
      "longs",
      "longs(uint256):(uint128,uint128,uint128,uint64,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new longshipMatic__longsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_longs(param0: BigInt): ethereum.CallResult<longshipMatic__longsResult> {
    let result = super.tryCall(
      "longs",
      "longs(uint256):(uint128,uint128,uint128,uint64,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new longshipMatic__longsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  lowest_brick_base(): BigInt {
    let result = super.call(
      "lowest_brick_base",
      "lowest_brick_base():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_lowest_brick_base(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lowest_brick_base",
      "lowest_brick_base():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpTokensForDeposit(underlyingToAdd: BigInt): BigInt {
    let result = super.call(
      "lpTokensForDeposit",
      "lpTokensForDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(underlyingToAdd)]
    );

    return result[0].toBigInt();
  }

  try_lpTokensForDeposit(underlyingToAdd: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpTokensForDeposit",
      "lpTokensForDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(underlyingToAdd)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repos(param0: BigInt): longshipMatic__reposResult {
    let result = super.call(
      "repos",
      "repos(uint256):(uint128,uint128,uint64,uint128,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new longshipMatic__reposResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_repos(param0: BigInt): ethereum.CallResult<longshipMatic__reposResult> {
    let result = super.tryCall(
      "repos",
      "repos(uint256):(uint128,uint128,uint64,uint128,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new longshipMatic__reposResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  repos_owed(): BigInt {
    let result = super.call("repos_owed", "repos_owed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_repos_owed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("repos_owed", "repos_owed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weights(param0: BigInt): BigInt {
    let result = super.call("weights", "weights(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_weights(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weights", "weights(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get theToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get theOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get theParent(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _BRICK_SIZE(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get volatility(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BankruptcyChompRepoCall extends ethereum.Call {
  get inputs(): BankruptcyChompRepoCall__Inputs {
    return new BankruptcyChompRepoCall__Inputs(this);
  }

  get outputs(): BankruptcyChompRepoCall__Outputs {
    return new BankruptcyChompRepoCall__Outputs(this);
  }
}

export class BankruptcyChompRepoCall__Inputs {
  _call: BankruptcyChompRepoCall;

  constructor(call: BankruptcyChompRepoCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BankruptcyChompRepoCall__Outputs {
  _call: BankruptcyChompRepoCall;

  constructor(call: BankruptcyChompRepoCall) {
    this._call = call;
  }
}

export class BankruptcyLiquidateLongCall extends ethereum.Call {
  get inputs(): BankruptcyLiquidateLongCall__Inputs {
    return new BankruptcyLiquidateLongCall__Inputs(this);
  }

  get outputs(): BankruptcyLiquidateLongCall__Outputs {
    return new BankruptcyLiquidateLongCall__Outputs(this);
  }
}

export class BankruptcyLiquidateLongCall__Inputs {
  _call: BankruptcyLiquidateLongCall;

  constructor(call: BankruptcyLiquidateLongCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BankruptcyLiquidateLongCall__Outputs {
  _call: BankruptcyLiquidateLongCall;

  constructor(call: BankruptcyLiquidateLongCall) {
    this._call = call;
  }
}

export class CheckOracleCall extends ethereum.Call {
  get inputs(): CheckOracleCall__Inputs {
    return new CheckOracleCall__Inputs(this);
  }

  get outputs(): CheckOracleCall__Outputs {
    return new CheckOracleCall__Outputs(this);
  }
}

export class CheckOracleCall__Inputs {
  _call: CheckOracleCall;

  constructor(call: CheckOracleCall) {
    this._call = call;
  }
}

export class CheckOracleCall__Outputs {
  _call: CheckOracleCall;

  constructor(call: CheckOracleCall) {
    this._call = call;
  }
}

export class ChompLongCall extends ethereum.Call {
  get inputs(): ChompLongCall__Inputs {
    return new ChompLongCall__Inputs(this);
  }

  get outputs(): ChompLongCall__Outputs {
    return new ChompLongCall__Outputs(this);
  }
}

export class ChompLongCall__Inputs {
  _call: ChompLongCall;

  constructor(call: ChompLongCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChompLongCall__Outputs {
  _call: ChompLongCall;

  constructor(call: ChompLongCall) {
    this._call = call;
  }
}

export class CloseLongCall extends ethereum.Call {
  get inputs(): CloseLongCall__Inputs {
    return new CloseLongCall__Inputs(this);
  }

  get outputs(): CloseLongCall__Outputs {
    return new CloseLongCall__Outputs(this);
  }
}

export class CloseLongCall__Inputs {
  _call: CloseLongCall;

  constructor(call: CloseLongCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseLongCall__Outputs {
  _call: CloseLongCall;

  constructor(call: CloseLongCall) {
    this._call = call;
  }
}

export class MakeLPDepositCall extends ethereum.Call {
  get inputs(): MakeLPDepositCall__Inputs {
    return new MakeLPDepositCall__Inputs(this);
  }

  get outputs(): MakeLPDepositCall__Outputs {
    return new MakeLPDepositCall__Outputs(this);
  }
}

export class MakeLPDepositCall__Inputs {
  _call: MakeLPDepositCall;

  constructor(call: MakeLPDepositCall) {
    this._call = call;
  }

  get underlyingToAdd(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get holder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MakeLPDepositCall__Outputs {
  _call: MakeLPDepositCall;

  constructor(call: MakeLPDepositCall) {
    this._call = call;
  }
}

export class OpenLongCall extends ethereum.Call {
  get inputs(): OpenLongCall__Inputs {
    return new OpenLongCall__Inputs(this);
  }

  get outputs(): OpenLongCall__Outputs {
    return new OpenLongCall__Outputs(this);
  }
}

export class OpenLongCall__Inputs {
  _call: OpenLongCall;

  constructor(call: OpenLongCall) {
    this._call = call;
  }

  get liq_price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get holder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class OpenLongCall__Outputs {
  _call: OpenLongCall;

  constructor(call: OpenLongCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OpenRepoCall extends ethereum.Call {
  get inputs(): OpenRepoCall__Inputs {
    return new OpenRepoCall__Inputs(this);
  }

  get outputs(): OpenRepoCall__Outputs {
    return new OpenRepoCall__Outputs(this);
  }
}

export class OpenRepoCall__Inputs {
  _call: OpenRepoCall;

  constructor(call: OpenRepoCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get holder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OpenRepoCall__Outputs {
  _call: OpenRepoCall;

  constructor(call: OpenRepoCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemLPTechFailureCall extends ethereum.Call {
  get inputs(): RedeemLPTechFailureCall__Inputs {
    return new RedeemLPTechFailureCall__Inputs(this);
  }

  get outputs(): RedeemLPTechFailureCall__Outputs {
    return new RedeemLPTechFailureCall__Outputs(this);
  }
}

export class RedeemLPTechFailureCall__Inputs {
  _call: RedeemLPTechFailureCall;

  constructor(call: RedeemLPTechFailureCall) {
    this._call = call;
  }

  get tokenToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemLPTechFailureCall__Outputs {
  _call: RedeemLPTechFailureCall;

  constructor(call: RedeemLPTechFailureCall) {
    this._call = call;
  }
}

export class RedeemRepoCall extends ethereum.Call {
  get inputs(): RedeemRepoCall__Inputs {
    return new RedeemRepoCall__Inputs(this);
  }

  get outputs(): RedeemRepoCall__Outputs {
    return new RedeemRepoCall__Outputs(this);
  }
}

export class RedeemRepoCall__Inputs {
  _call: RedeemRepoCall;

  constructor(call: RedeemRepoCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemRepoCall__Outputs {
  _call: RedeemRepoCall;

  constructor(call: RedeemRepoCall) {
    this._call = call;
  }
}

export class RedeemUnderlyingLongTechFailureCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingLongTechFailureCall__Inputs {
    return new RedeemUnderlyingLongTechFailureCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingLongTechFailureCall__Outputs {
    return new RedeemUnderlyingLongTechFailureCall__Outputs(this);
  }
}

export class RedeemUnderlyingLongTechFailureCall__Inputs {
  _call: RedeemUnderlyingLongTechFailureCall;

  constructor(call: RedeemUnderlyingLongTechFailureCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingLongTechFailureCall__Outputs {
  _call: RedeemUnderlyingLongTechFailureCall;

  constructor(call: RedeemUnderlyingLongTechFailureCall) {
    this._call = call;
  }
}

export class RedeemUnderlyingRepoTechFailureCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingRepoTechFailureCall__Inputs {
    return new RedeemUnderlyingRepoTechFailureCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingRepoTechFailureCall__Outputs {
    return new RedeemUnderlyingRepoTechFailureCall__Outputs(this);
  }
}

export class RedeemUnderlyingRepoTechFailureCall__Inputs {
  _call: RedeemUnderlyingRepoTechFailureCall;

  constructor(call: RedeemUnderlyingRepoTechFailureCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingRepoTechFailureCall__Outputs {
  _call: RedeemUnderlyingRepoTechFailureCall;

  constructor(call: RedeemUnderlyingRepoTechFailureCall) {
    this._call = call;
  }
}

export class RemoveLPDepositCall extends ethereum.Call {
  get inputs(): RemoveLPDepositCall__Inputs {
    return new RemoveLPDepositCall__Inputs(this);
  }

  get outputs(): RemoveLPDepositCall__Outputs {
    return new RemoveLPDepositCall__Outputs(this);
  }
}

export class RemoveLPDepositCall__Inputs {
  _call: RemoveLPDepositCall;

  constructor(call: RemoveLPDepositCall) {
    this._call = call;
  }

  get underlyingToSendBack(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLPDepositCall__Outputs {
  _call: RemoveLPDepositCall;

  constructor(call: RemoveLPDepositCall) {
    this._call = call;
  }
}

export class SetVolatilityCall extends ethereum.Call {
  get inputs(): SetVolatilityCall__Inputs {
    return new SetVolatilityCall__Inputs(this);
  }

  get outputs(): SetVolatilityCall__Outputs {
    return new SetVolatilityCall__Outputs(this);
  }
}

export class SetVolatilityCall__Inputs {
  _call: SetVolatilityCall;

  constructor(call: SetVolatilityCall) {
    this._call = call;
  }

  get newVolatility(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVolatilityCall__Outputs {
  _call: SetVolatilityCall;

  constructor(call: SetVolatilityCall) {
    this._call = call;
  }
}
